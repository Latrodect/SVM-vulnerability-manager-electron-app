from django.http import JsonResponse
from rest_framework import status
from rest_framework.decorators import api_view
from rest_framework_simplejwt.tokens import RefreshToken
from django.contrib.auth import authenticate
from django.contrib.auth import get_user_model
from ..request_serializers.auth_serializer import UserLoginSerializer
from ..request_serializers.register_serializer import UserRegistrationSerializer

@api_view(['POST'])
def registration_view(request):
    """
    API endpoint for user registration.

    Accepts POST request with user registration data.
    Creates a new user if the provided data is valid.
    """
    if request.method == 'POST':
        serializer = UserRegistrationSerializer(data=request.data)
        if serializer.is_valid():
            username = serializer.validated_data['username']
            email = serializer.validated_data['email']
            password = serializer.validated_data['password']
            User = get_user_model()
            
            if User.objects.filter(username=username).exists():
                return JsonResponse({'message': 'User already exists', 'status': status.HTTP_400_BAD_REQUEST}, status=status.HTTP_400_BAD_REQUEST)
            
            user = User.objects.create_user(username=username, email=email, password=password)
            return JsonResponse({'message': 'User registered successfully', 'status': status.HTTP_201_CREATED}, status=status.HTTP_201_CREATED)
        return JsonResponse(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

@api_view(['POST'])
def login_view(request):
    """
    API endpoint for user login.

    Accepts POST request with user credentials.
    Authenticates the user and returns access and refresh tokens if successful.
    """
    serializer = UserLoginSerializer(data=request.data)
    if serializer.is_valid():
        username = serializer.validated_data['username']
        password = serializer.validated_data['password']
        user = authenticate(request, username=username, password=password)
        
        if user is not None:
            refresh = RefreshToken.for_user(user)
            return JsonResponse({'refresh': str(refresh), 'access': str(refresh.access_token), 'status': status.HTTP_201_CREATED}, status=status.HTTP_201_CREATED)
    return JsonResponse({'message': 'Invalid username or password', 'status': status.HTTP_400_BAD_REQUEST}, status=status.HTTP_400_BAD_REQUEST)
