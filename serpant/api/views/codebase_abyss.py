import requests
import re
from urllib.parse import urlparse
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from ..request_serializers.codebase_bypass_serializer import CodebaseAuthBypassSerializer
import time

class CodebaseAuthBypassAPIView(APIView):
    """
    API endpoint for scanning a GitHub repository for authentication bypass vulnerabilities.
    """
    
    GITHUB_API_BASE_URL = 'https://api.github.com'
    MAX_RETRIES = 3
    RETRY_DELAY = 1  

    def post(self, request, format=None):
        serializer = CodebaseAuthBypassSerializer(data=request.data)
        if serializer.is_valid():
            url = serializer.validated_data["url"]
            patterns = serializer.validated_data["patterns"]
            token = serializer.validated_data["token"]

            vulnerabilities = self.scan_github_repository(url=url, patterns=patterns, token=token)
            return Response({"message": "Scan completed successfully.", "data": vulnerabilities}, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
    def scan_github_repository(self, url, patterns, token):
        vulnerabilities = []
        owner, repo = self.extract_owner_and_repo(url)
        contents_url = f"{self.GITHUB_API_BASE_URL}/repos/{owner}/{repo}/contents/"
        vulnerabilities += self.scan_contents(contents_url, patterns, token)
        return vulnerabilities
    
    def scan_contents(self, contents_url, patterns, token):
        vulnerabilities = []
        headers = {'Authorization': 'token ' + token}
        
        contents_response = self.send_request(contents_url, headers=headers)
        if contents_response is not None and contents_response.status_code == 200:
            contents_data = contents_response.json()
            for content in contents_data:
                if content["type"] == "file":
                    file_url = content["download_url"]
                    file_response = self.send_request(file_url, headers)
                    if file_response is not None and file_response.status_code == 200:
                        file_content = file_response.text
                        vulnerabilities += self.scan_file(file_content, content["path"], patterns)
                elif content["type"] == "dir":
                    vulnerabilities += self.scan_contents(content["url"], patterns, token)
        return vulnerabilities
    
    def scan_file(self, file_content, file_path, patterns):
        vulnerabilities = []
        for line_number, line in enumerate(file_content.split('\n'), start=1):
            for pattern in patterns:
                matches = re.findall(pattern, line)
                if matches:
                    for match in matches:
                        vulnerabilities.append({
                            "file_path": file_path,
                            "line_number": line_number,
                            "vulnerability": f"Pattern '{pattern}' found in line {line_number} of file {file_path}: {match}"
                        })
        return vulnerabilities
    
    def extract_owner_and_repo(self, url):
        parsed_url = urlparse(url)
        path_parts = parsed_url.path.strip('/').split('/')
        owner = path_parts[-2]
        repo = path_parts[-1]
        return owner, repo

    def send_request(self, url, headers):
        retries = 0
        while retries < self.MAX_RETRIES:
            response = requests.get(url, headers=headers)
            if response.status_code == 200:
                return response
            elif response.status_code == 401:
                print("Unauthorized. Retrying...")
                retries += 1
                time.sleep(self.RETRY_DELAY)
            else:
                # Handle other status codes
                return response
        return requests.Response()  # Return a valid response object
