// CodebaseTabs.js

import * as React from "react";
import PropTypes from "prop-types";
import Tabs from "@mui/material/Tabs";
import Tab from "@mui/material/Tab";
import Typography from "@mui/material/Typography";
import Box from "@mui/material/Box";
import AddIcon from "@mui/icons-material/Add";
import IconButton from "@mui/material/IconButton";
import CloseIcon from "@mui/icons-material/Close";
import { createTheme, ThemeProvider } from "@mui/material/styles";
import { Stack, Snackbar, Alert } from "@mui/material";
import CodebaseInnerTabs from "./CodebaseInnerTabs";
import CodebaseForm from "../Forms/CodebaseForm";
import CodebaseAbyssService from "../../Services/CodebaseAbyssService";

function CustomTabPanel(props) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }}>
          <Typography>{children}</Typography>
        </Box>
      )}
    </div>
  );
}

CustomTabPanel.propTypes = {
  children: PropTypes.node,
  index: PropTypes.number.isRequired,
  value: PropTypes.number.isRequired,
};

export default function CodebaseTabs() {
  const [value, setValue] = React.useState(0);
  const [tabCount, setTabCount] = React.useState(3);
  const [hoveredTab, setHoveredTab] = React.useState(null);
  const [url, setURL] = React.useState("");
  const [patterns, setPatterns] = React.useState("");
  const [activeTab, setActiveTab] = React.useState([]);
  const [open, setOpen] = React.useState(false);
  const [data, setData] = React.useState([]);
  const [loading, setLoading] = React.useState(false);

  const handleChange = (event, newValue) => {
    setValue(newValue);
  };

  const handleAddTab = () => {
    setTabCount(tabCount + 1);
    setValue(tabCount);
  };

  const handleRemoveTab = (index) => {
    if (tabCount > 1) {
      setTabCount(tabCount - 1);
      setValue(Math.min(index, tabCount - 2));
    }
  };

  const handleSubmit = (body) => {
    setLoading(true);
    CodebaseAbyssService.CodebaseAbyssPostRequest(body)
      .then((response) => {
        let data = response.data;
        console.log(data);
        setData(data);
        setOpen(true);
      })
      .catch((error) => {
        console.error("Error:", error);
      })
      .finally(() => {
        setLoading(false);
        setOpen(true);
      });
  };

  const handleUrlChange = (url) => {
    setURL(url);
  };

  const handleQueryChange = (query) => {
    setPatterns(query);
  };

  const handleActiveTabChange = (index) => {
    setActiveTab(index);
    console.log(index);
  };

  const handleScanClick = () => {
    const cleanedQueryString = patterns
      .replace(/\\+/g, "\\\\")
      .replace(/\\\\n\s*/g, "")
      .replace(/\s+/g, " ")
      .replace(/\\"/g, '"');

    console.log("Cleaned query string:", cleanedQueryString);

    const patternList = JSON.parse(cleanedQueryString);
    const githubToken = process.env.REACT_APP_GITHUB_TOKEN;
    const cleanedToken = githubToken.replace(/^"|"$/g, "").replace(/\\/g, "");
    const body = {
      url: url,
      patterns: patternList,
      token: cleanedToken,
    };
    handleSubmit(body);
  };

  const theme = createTheme({
    palette: {
      primary: {
        main: "#FF6C37",
      },
    },
  });

  const handleClose = (event, reason) => {
    if (reason === "clickaway") {
      return;
    }
    setOpen(false);
  };

  return (
    <ThemeProvider theme={theme}>
      <Box sx={{ width: "100%", mt: 2 }}>
        <Stack
          direction="row"
          alignItems="center"
          spacing={1}
          justifyContent="center"
          sx={{ borderBottom: "1px solid #414141", p: 0 }}
        >
          <Tabs
            value={value}
            onChange={handleChange}
            aria-label="Request tabs."
            indicatorColor="primary"
            sx={{
              "& .MuiTabs-root": {
                color: "#949494",
                fontSize: "12px",
                height: "15px",
                fontWeight: "400",
                fontFamily: "calibri",
              },
              "& .MuiTab-root": {
                minWidth: "auto",
                color: "#949494",
                fontSize: "12px",
                height: "15px",
                padding: "6px 8px",
                position: "relative",
                borderRight: "1px solid #414141",
                textTransform: "none",
                fontWeight: "400",
                fontFamily: "calibri",
              },
              "& .MuiTab-root.Mui-selected": {
                color: "whitesmoke",
                fontSize: "12px",
                height: "15px",
                fontWeight: "400",
                fontFamily: "calibri",
              },
              "& .MuiTab-wrapper": {
                display: "flex",
                alignItems: "center",
              },
              "& .MuiTab-label": {
                marginRight: "4px",
                display: "flex",
                alignItems: "center",
              },
              "& .MuiTab-textColorInherit": {
                opacity: 1,
              },
            }}
          >
            {[...Array(tabCount)].map((_, index) => (
              <Tab
                key={index}
                label={
                  <Stack direction="row" alignItems="center" spacing={3}>
                    <Typography
                      sx={{ color: "#35EB79", fontSize: "10px", mr: 1, p: 1 }}
                    >
                      NEW{" "}
                    </Typography>
                    {`New Request ${index + 1}`}
                    <IconButton
                      className="remove-button"
                      onClick={() => handleRemoveTab(hoveredTab)}
                      sx={{
                        color: "#949494",
                        width: "15px",
                        "&:hover": {
                          color: "white",
                        },
                      }}
                    >
                      <CloseIcon sx={{ width: "15px" }} />
                    </IconButton>
                  </Stack>
                }
                onMouseEnter={() => setHoveredTab(index)}
                onMouseLeave={() => setHoveredTab(null)}
              />
            ))}
          </Tabs>
          <IconButton
            className="add-button"
            size="small"
            onClick={handleAddTab}
            style={{ marginRight: "auto", marginLeft: "4px" }}
          >
            <AddIcon style={{ cursor: "pointer", color: "#949494" }} />
          </IconButton>
        </Stack>
        {[...Array(tabCount)].map((_, index) => (
          <CustomTabPanel key={index} value={value} index={index}>
            <CodebaseForm
              onUrlChange={handleUrlChange}
              onSubmit={handleSubmit}
              onScanClick={handleScanClick}
              activeTab={activeTab}
            />
            <CodebaseInnerTabs
              onQueryChange={handleQueryChange}
              handleActiveTabChange={handleActiveTabChange}
              datasource={data}
              loading={loading}
            />
          </CustomTabPanel>
        ))}
        <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>
          <Alert onClose={handleClose} severity="success">
            Scan completed successfully.
          </Alert>
        </Snackbar>
      </Box>
    </ThemeProvider>
  );
}
