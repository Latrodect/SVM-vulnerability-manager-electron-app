import * as React from "react";
import PropTypes from "prop-types";
import Tabs from "@mui/material/Tabs";
import Tab from "@mui/material/Tab";
import Typography from "@mui/material/Typography";
import Box from "@mui/material/Box";
import AddIcon from "@mui/icons-material/Add";
import IconButton from "@mui/material/IconButton";
import CloseIcon from "@mui/icons-material/Close";
import SubdomainForm from "../Forms/SubdomainScannerForm";
import { createTheme, ThemeProvider } from "@mui/material/styles";
import { Stack } from "@mui/material";
import SubdomainResultTabs from "./SubdomainInnerTabs";

function CustomTabPanel(props) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }}>
          <Typography>{children}</Typography>
        </Box>
      )}
    </div>
  );
}

CustomTabPanel.propTypes = {
  children: PropTypes.node,
  index: PropTypes.number.isRequired,
  value: PropTypes.number.isRequired,
};

export default function SubdomainTabs() {
  const [value, setValue] = React.useState(0);
  const [tabCount, setTabCount] = React.useState(3);
  const [hoveredTab, setHoveredTab] = React.useState(null);

  const handleChange = (event, newValue) => {
    setValue(newValue);
  };

  const handleAddTab = () => {
    setTabCount(tabCount + 1);
    setValue(tabCount);
  };

  const handleRemoveTab = (index) => {
    if (tabCount > 1) {
      setTabCount(tabCount - 1);
      setValue(Math.min(index, tabCount - 2));
    }
  };

  const theme = createTheme({
    palette: {
      primary: {
        main: "#FF6C37",
      },
    },
  });

  return (
    <ThemeProvider theme={theme}>
      <Box sx={{ width: "100%", mt: 2 }}>
        <Stack
          direction="row"
          alignItems="center"
          spacing={1}
          justifyContent="center"
          sx={{ borderBottom: "1px solid #414141", p: 0 }}
        >
          <Tabs
            value={value}
            onChange={handleChange}
            aria-label="Request tabs."
            indicatorColor="primary"
            sx={{
              "& .MuiTabs-root": {
                color: "#949494",
                fontSize: "12px",
                height: "15px",
                fontWeight: "400",
                fontFamily: "calibri",
              },
              "& .MuiTab-root": {
                minWidth: "auto",
                color: "#949494",
                fontSize: "12px",
                height: "15px",
                padding: "6px 8px",
                position: "relative",
                borderRight: "1px solid #414141",
                textTransform: "none",
                fontWeight: "400",
                fontFamily: "calibri",
              },
              "& .MuiTab-root.Mui-selected": {
                color: "whitesmoke",
                fontSize: "12px",
                height: "15px",
                fontWeight: "400",
                fontFamily: "calibri",
              },
              "& .MuiTab-wrapper": {
                display: "flex",
                alignItems: "center",
              },
              "& .MuiTab-label": {
                marginRight: "4px",
                display: "flex",
                alignItems: "center",
              },
              "& .MuiTab-textColorInherit": {
                opacity: 1,
              },
            }}
          >
            {[...Array(tabCount)].map((_, index) => (
              <Tab
                key={index}
                label={
                  <Stack direction="row" alignItems="center" spacing={3}>
                    <Typography
                      sx={{ color: "#35EB79", fontSize: "10px", mr: 1, p: 1 }}
                    >
                      NEW{" "}
                    </Typography>
                    {`New Request ${index + 1}`}
                    <IconButton
                      className="remove-button"
                      onClick={() => handleRemoveTab(hoveredTab)}
                      sx={{
                        color: "#949494",
                        width: "15px",
                        "&:hover": {
                          color: "white",
                        },
                      }}
                    >
                      <CloseIcon sx={{ width: "15px" }} />
                    </IconButton>
                  </Stack>
                }
                onMouseEnter={() => setHoveredTab(index)}
                onMouseLeave={() => setHoveredTab(null)}
              />
            ))}
          </Tabs>
          <IconButton
            className="add-button"
            size="small"
            onClick={handleAddTab}
            style={{ marginRight: "auto", marginLeft: "4px" }}
          >
            <AddIcon style={{ cursor: "pointer", color: "#949494" }} />
          </IconButton>
        </Stack>
        {[...Array(tabCount)].map((_, index) => (
          <CustomTabPanel key={index} value={value} index={index}>
            <SubdomainForm />
            <SubdomainResultTabs />
          </CustomTabPanel>
        ))}
      </Box>
    </ThemeProvider>
  );
}
