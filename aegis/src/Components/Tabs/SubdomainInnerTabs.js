import * as React from "react";
import PropTypes from "prop-types";
import Tabs from "@mui/material/Tabs";
import Tab from "@mui/material/Tab";
import Typography from "@mui/material/Typography";
import Box from "@mui/material/Box";
import IconButton from "@mui/material/IconButton";
import TextareaAutosize from "@mui/material/TextareaAutosize";
import { createTheme, ThemeProvider } from "@mui/material/styles";
import { Stack } from "@mui/material";
import useLang from "../../Hooks/useLang";

function CustomTabPanel(props) {
  const { t } = useLang();
  const { value, index, onQueryChange, ...other } = props; 
  const [textareaContent, setTextareaContent] = React.useState("");

  const handleTextareaChange = (event) => {
    setTextareaContent(event.target.value);
    onQueryChange(event.target.value); 
  };

  const lines = textareaContent.split("\n");

  return (
    <Stack direction="row" sx={{ width: "100%" }}>
      <Box
        sx={{
          borderLeft: "1px solid #313131",
          borderBottom: "1px solid #313131",
          width: "70%",
        }}
      >
        <div
          role="tabpanel"
          hidden={value !== index}
          id={`simple-tabpanel-${index}`}
          aria-labelledby={`simple-tab-${index}`}
          {...other}
        >
          {value === index && (
            <Box sx={{ p: 3 }}>
              <div style={{ display: "flex", flexDirection: "row" }}>
                <div
                  style={{
                    marginRight: "8px",
                    userSelect: "none",
                    color: "#7e7e7e",
                    fontSize: "10px",
                    marginTop: "8px",
                  }}
                >
                  {lines.map((line, index) => (
                    <div key={index}>{index + 1}</div>
                  ))}
                </div>
                <TextareaAutosize
                  minRows={lines.length + 1}
                  style={{
                    width: "100%",
                    backgroundColor: "#313131",
                    color: "#949494",
                    border: "1px solid #414a52",
                    padding: "8px",
                    borderRadius: "4px",
                    resize: "none",
                  }}
                  aria-label="Query editor"
                  placeholder={`Enter your ${props.label.toLowerCase()} query here...`}
                  value={textareaContent}
                  onChange={handleTextareaChange}
                />
              </div>
            </Box>
          )}
        </div>
      </Box>
      <Box
        sx={{
          borderLeft: "1px solid #313131",
          borderBottom: "1px solid #313131",
          borderRight: "1px solid #313131",
          width: "30%",
          justifyContent: "center",
          alignItems: "center",
        }}
      >
        {value === index && (
          <Typography
            sx={{
              fontSize: "12px",
              color: "#949494",
              justifyContent: "center",
              alignItems: "center",
              textAlign: "center",
              mt: 5,
            }}
          >
            {t("subdomain.query_description_p1")}
            <strong style={{ color: "#9A88B3" }}>
              {" "}
              {t("subdomain.query_description_p4")}
            </strong>{" "}
            {t("subdomain.query_description_p2")}{" "}
            <strong style={{ color: "#9A88B3" }}>
              {" "}
              {t("subdomain.query_description_p4")}
            </strong>{" "}
            {t("subdomain.query_description_p3")}
          </Typography>
        )}
      </Box>
    </Stack>
  );
}

CustomTabPanel.propTypes = {
  children: PropTypes.node,
  index: PropTypes.number.isRequired,
  value: PropTypes.number.isRequired,
  onQueryChange: PropTypes.func.isRequired,
};

export default function CodebaseInnerTabs({ onQueryChange, handleActiveTabChange, data }) {
  const { t } = useLang();
  const [value, setValue] = React.useState(0);
  const [tabCount, setTabCount] = React.useState(4);
  const [hoveredTab, setHoveredTab] = React.useState(null);

  const handleChange = (event, newValue) => {
    setValue(newValue);
    const selectedQuery = tabsArray[newValue];
    onQueryChange(selectedQuery); 
    handleActiveTabChange(newValue);
  };

  const theme = createTheme({
    palette: {
      primary: {
        main: "#FF6C37",
      },
    },
  });

  const tabsArray = [
    "XSS Scan",
    "Auth Bypass",
    "NVD",
    "Sensitive Data",
    "Deserialization",
    "Access Control",
    "SQL Injection",
  ];

  return (
    <ThemeProvider theme={theme}>
      <Box sx={{ width: "100%", mt: 2 }}>
        <Stack
          direction="row"
          alignItems="center"
          spacing={1}
          justifyContent="center"
          sx={{ borderBottom: "1px solid #313131" }}
        >
          <Tabs
            value={value}
            onChange={handleChange}
            aria-label="Description tabs."
            indicatorColor="primary"
            sx={{
              "& .MuiTabs-root": {
                color: "#949494",
                fontSize: "13px",
                fontWeight: "400",
                height: "15px",
                fontFamily: "calibri",
              },
              "& .MuiTab-root": {
                minWidth: "auto",
                color: "#949494",
                fontSize: "13px",
                height: "15px",
                padding: "6px 8px",
                position: "relative",
                textTransform: "none",
                fontWeight: "400",
                fontFamily: "calibri",
              },
              "& .MuiTab-root.Mui-selected": {
                color: "whitesmoke",
                fontSize: "13px",
                height: "15px",
                fontWeight: "400",
                fontFamily: "calibri",
              },
              "& .MuiTab-wrapper": {
                display: "flex",
                alignItems: "center",
              },
              "& .MuiTab-label": {
                marginRight: "4px",
                display: "flex",
                alignItems: "center",
              },
              "& .MuiTab-textColorInherit": {
                opacity: 1,
              },
            }}
          >
            {tabsArray.map((tab, index) => (
              <Tab
                key={index}
                label={tab}
                onMouseEnter={() => setHoveredTab(index)}
                onMouseLeave={() => setHoveredTab(null)}
              />
            ))}
          </Tabs>
          <IconButton
            className="add-button"
            size="small"
            style={{ marginRight: "auto", marginLeft: "4px" }}
          >
            <Typography
              sx={{
                color: "#9A88B3",
                fontSize: "10px",
                height: "15px",
                textAlign: "center",
              }}
            >
              {t("subdomain.overall")}
            </Typography>
          </IconButton>
        </Stack>
        {tabsArray.map((tab, index) => (
          <CustomTabPanel key={index} value={value} index={index} label={tab} onQueryChange={onQueryChange} /> 
        ))}
 
      </Box>
    </ThemeProvider>
  );
}
