// CodebaseForm.js
import React, { useRef } from "react";
import { Stack, TextField, Box, Button, MenuItem, Menu, IconButton } from "@mui/material";
import { useTranslation } from "react-i18next";
import TroubleshootIcon from "@mui/icons-material/Troubleshoot";
import ArrowDropDownIcon from "@mui/icons-material/ArrowDropDown";
import { createTheme, ThemeProvider } from "@mui/material/styles";

export default function CodebaseForm({ onUrlChange, onScanClick, activeTab }) {
  const { t } = useTranslation();
  const [domainUrl, setDomainUrl] = React.useState("https://grafana.com/products/cloud/");
  const [anchorEl, setAnchorEl] = React.useState(null);
  const scanButtonRef = useRef(null);

  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  const handleMenuItemClick = (newDomainUrl) => {
    setDomainUrl(newDomainUrl);
    handleClose();
  };

  const handleScanClick = () => {
    const url = domainUrl;
    console.log(activeTab)
    if (activeTab === 1) {
      onScanClick(url);
    } else {
      console.log("Scan can only be performed on Auth Bypass tab.");
    }
  };

  const handleUrlChange = (event) => {
    setDomainUrl(event.target.value);
    onUrlChange(event.target.value);
  };

  const theme = createTheme({
    palette: {
      primary: {
        main: "#949494",
      },
    },
  });

  return (
    <ThemeProvider theme={theme}>
      <Stack direction="column" spacing={4} sx={{ height: "100%", width: "100%" }}>
        <Box sx={{ display: "flex", alignItems: "center" }}>
          <TroubleshootIcon sx={{ color: "white", mr: 1, my: 0.5 }} />
          <TextField
            required
            focused
            size="small"
            sx={{
              color: "white",
              backgroundColor: "transparent",
              width: "100%",
              input: { color: "white", fontSize: "13px" },
              label: { color: "#FF6C37" },
              borderRadius: "20px",
              mr: 2,
              "&:focus": {
                borderColor: "#FF6C37",
              },
              borderWidth: "1px",
            }}
            id="outlined-required"
            label="Domain"
            value={domainUrl}
            onChange={handleUrlChange}
          />
          <Button
            ref={scanButtonRef}
            sx={{
              width: "87px",
              color: "whitesmoke",
              p: 1,
              backgroundColor: "#FF6C37",
              fontWeight: "400",
              fontSize: "13px",
            }}
            onClick={handleScanClick}
          >
            {t("subdomain.button")}
          </Button>
          <IconButton onClick={handleClick} sx={{ color: "white", padding: "8px" }}>
            <ArrowDropDownIcon />
          </IconButton>

          <Menu
            anchorEl={anchorEl}
            open={Boolean(anchorEl)}
            onClose={handleClose}
            PaperProps={{
              elevation: 0,
              sx: {
                width: "150px",
                mt: 1,
                backgroundColor: "#313131",
                color: "#949494",
                zIndex: 10000,
              },
            }}
          >
            <MenuItem
              onClick={() => handleMenuItemClick("domain1")}
              sx={{ fontSize: "11px", color: "whitesmoke" }}
            >
              {t("subdomain.download")}
            </MenuItem>
          </Menu>
        </Box>
      </Stack>
    </ThemeProvider>
  );
}
