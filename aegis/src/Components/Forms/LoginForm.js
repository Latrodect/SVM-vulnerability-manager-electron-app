import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import {
  Button,
  Box,
  Typography,
  TextField,
  Stack,
  IconButton,
  InputAdornment,
  Snackbar,
  Alert,
} from "@mui/material";
import AccountCircle from "@mui/icons-material/AccountCircle";
import LockIcon from "@mui/icons-material/Lock";
import Visibility from "@mui/icons-material/Visibility";
import VisibilityOff from "@mui/icons-material/VisibilityOff";
import SignInService from "../../Services/SignInService";
import useLang from "../../Hooks/useLang";

export default function LoginForm({ resetValues }) {
  const { t } = useLang();
  const navigate = useNavigate();
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [open, setOpen] = useState(false); 

  const handleLogin = () => {
    const requestBody = {
      username: username,
      password: password,
    };
    SignInService.SignInPostRequest(requestBody)
      .then((response) => {
        console.log(response);
        if (response.status === 201) {
          localStorage.setItem("refreshToken", response.refresh);
          localStorage.setItem("accessToken", response.access);
          navigate("/dashboard");
        } else {
          setOpen(true); 
        }
      })
      .catch((error) => {
        console.error("Error:", error);
        setOpen(true); 
      })
      .finally(() => resetValues && resetValues());
  };

  const togglePasswordVisibility = () => {
    setShowPassword(!showPassword);
  };

  const handleClick = () => {
    navigate("/register");
  };

  const handleClose = (event, reason) => {
    if (reason === "clickaway") {
      return;
    }
    setOpen(false);
  };

  return (
    <div>
      <Stack
        direction="column"
        spacing={2}
        sx={{ width: "500px" }}
        alignItems="center"
        justifyContent="center"
      >
        <Box sx={{ display: "flex", alignItems: "center" }}>
          <AccountCircle sx={{ color: "#FF6C37", mr: 1, my: 0.5 }} />
          <TextField
            required
            sx={{
              color: "white",
              backgroundColor: "white",
              width: "300px",
              input: { color: "#313131" },
              label: { color: "#FF6C37" },
              borderRadius: "20px",
            }}
            id="outlined-required"
            label="Username"
            onChange={(e) => setUsername(e.target.value)}
          />
        </Box>
        <Box sx={{ display: "flex", alignItems: "center" }}>
          <LockIcon sx={{ color: "#FF6C37", mr: 1, my: 0.5 }} />
          <TextField
            required
            sx={{
              color: "white",
              backgroundColor: "white",
              width: "300px",
              input: { color: "#313131" },
              label: { color: "#FF6C37" },
              borderRadius: "20px",
            }}
            id="outlined-required"
            label="Password"
            type={showPassword ? "text" : "password"}
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            InputProps={{
              endAdornment: (
                <InputAdornment position="end" sx={{ fontSize: "8px" }}>
                  <IconButton
                    aria-label="toggle password visibility"
                    onClick={togglePasswordVisibility}
                    edge="end"
                    sx={{
                      bgcolor: "transparent",
                      p: 0,
                      mr: 1,
                    }}
                  >
                    {showPassword ? (
                      <VisibilityOff fontSize="small" />
                    ) : (
                      <Visibility fontSize="small" />
                    )}
                  </IconButton>
                </InputAdornment>
              ),
            }}
          />
        </Box>
        <Typography
          sx={{
            color: "whitesmoke",
            fontSize: "12px",
            mt: 1,
            "&:hover": {
              cursor: "pointer",
            },
          }}
          onClick={handleClick}
        >
          {t("signin.register")}
        </Typography>
        <Box sx={{ display: "flex", alignItems: "flex-end" }}>
          <Button
            variant="outlined"
            sx={{
              backgroundColor: "#FF6C37",
              color: "white",
              width: "350px",
              height: "50px",
            }}
            onClick={handleLogin}
          >
            {t("signin.button")}
          </Button>
        </Box>
      </Stack>
      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>
        <Alert onClose={handleClose} severity="error">
          Invalid credentials. Please try again.
        </Alert>
      </Snackbar>
    </div>
  );
}
